<?php

namespace benben\web\view;

use benben\Benben;
use benben\base\Exception;
use benben\web\helpers\Html;

/**
 * 
 * @author benben
 */
class BasicView extends View
{
	/**
	 * Name of the hidden field storing persistent page states.
	 */
	const STATE_INPUT_NAME='BENBEN_PAGE_STATE';
	
	private $_cachingStack;
	protected $_widgets;
	protected $_widgetStack;
	
    public function setData($data)
    {
    	$this->_data = $data;
    }

    public function render ($template)
    {
        $this->_layout = $this->_owner->getLayout();
        $this->_teamplate = $template;
        ob_start();
        extract($this->_data);
        include $template;
        $content = ob_get_clean(); 
        ob_start();
        include Benben::app()->getLayoutPath($this->_owner->layout);
        
        return $this->processOutput( ob_get_clean() );
    }
    
    public function renderPartial ($template)
    {
    	$this->_teamplate = $template;
    	ob_start();
    	extract($this->_data);
    	include $template;
    	
    	return $this->processOutput( ob_get_clean() );
    }
    
    /**
     * Postprocesses the output generated by {@link render()}.
     * This method is invoked at the end of {@link render()} and {@link renderText()}.
     * If there are registered client scripts, this method will insert them into the output
     * at appropriate places. If there are dynamic contents, they will also be inserted.
     * This method may also save the persistent page states in hidden fields of
     * stateful forms in the page.
     * @param string $output the output generated by the current action
     * @return string the output that has been processed.
     */
    public function processOutput($output)
    {
    	Benben::app()->getClientScript()->render($output);
    
    	// if using page caching, we should delay dynamic output replacement
    	if($this->_dynamicOutput!==null && $this->isCachingStackEmpty())
    	{
    		$output=$this->processDynamicOutput($output);
    		$this->_dynamicOutput=null;
    	}
    
    	if($this->_pageStates===null)
    		$this->_pageStates=$this->loadPageStates();
    	if(!empty($this->_pageStates))
    		$this->savePageStates($this->_pageStates,$output);
    
    	return $output;
    }
    
    /**
     * Returns whether the caching stack is empty.
     * @return boolean whether the caching stack is empty. If not empty, it means currently there are
     * some output cache in effect. Note, the return result of this method may change when it is
     * called in different output regions, depending on the partition of output caches.
     */
    public function isCachingStackEmpty()
    {
    	return $this->_cachingStack===null || !$this->_cachingStack->getCount();
    }
    
    /**
     * Creates a widget and initializes it.
     * This method first creates the specified widget instance.
     * It then configures the widget's properties with the given initial values.
     * At the end it calls {@link Widget::init} to initialize the widget.
     * Starting from version 1.1, if a {@link WidgetFactory widget factory} is enabled,
     * this method will use the factory to create the widget, instead.
     * @param string $className class name (can be in path alias format)
     * @param array $properties initial property values
     * @return Widget the fully initialized widget instance.
     */
    public function createWidget($className,$properties=array())
    {
    	$widget=Benben::app()->getWidgetFactory()->createWidget($this,$className,$properties);
    	$widget->init();
    	return $widget;
    }
    
    /**
     * Creates a widget and executes it.
     * @param string $className the widget class name or class in dot syntax (e.g. application.widgets.MyWidget)
     * @param array $properties list of initial property values for the widget (Property Name => Property Value)
     * @param boolean $captureOutput whether to capture the output of the widget. If true, the method will capture
     * and return the output generated by the widget. If false, the output will be directly sent for display
     * and the widget object will be returned. This parameter is available since version 1.1.2.
     * @return mixed the widget instance when $captureOutput is false, or the widget output when $captureOutput is true.
     */
    public function widget($className,$properties=array(),$captureOutput=false)
    {
    	if($captureOutput)
    	{
    		ob_start();
    		ob_implicit_flush(false);
    		$widget=$this->createWidget($className,$properties);
    		$widget->run();
    		return ob_get_clean();
    	}
    	else
    	{
    		$widget=$this->createWidget($className,$properties);
    		$widget->run();
    		return $widget;
    	}
    }
    
    /**
     * Creates a widget and executes it.
     * This method is similar to {@link widget()} except that it is expecting
     * a {@link endWidget()} call to end the execution.
     * @param string $className the widget class name or class in dot syntax (e.g. application.widgets.MyWidget)
     * @param array $properties list of initial property values for the widget (Property Name => Property Value)
     * @return Widget the widget created to run
     * @see endWidget
     */
    public function beginWidget($className,$properties=array())
    {
    	$widget=$this->createWidget($className,$properties);
    	$this->_widgetStack[]=$widget;
    	return $widget;
    }
    
    /**
     * Ends the execution of the named widget.
     * This method is used together with {@link beginWidget()}.
     * @param string $id optional tag identifying the method call for debugging purpose.
     * @return Widget the widget just ended running
     * @throws Exception if an extra endWidget call is made
     * @see beginWidget
     */
    public function endWidget($id='')
    {
    	if(($widget=array_pop($this->_widgetStack))!==null)
    	{
    		$widget->run();
    		return $widget;
    	}
    	else
    		throw new Exception(Benben::t('benben','{controller} has an extra endWidget({id}) call in its view.',
    				array('{controller}'=>get_class($this),'{id}'=>$id)));
    }
    
    /**
     * Returns a persistent page state value.
     * A page state is a variable that is persistent across POST requests of the same page.
     * In order to use persistent page states, the form(s) must be stateful
     * which are generated using {@link CHtml::statefulForm}.
     * @param string $name the state name
     * @param mixed $defaultValue the value to be returned if the named state is not found
     * @return mixed the page state value
     * @see setPageState
     * @see CHtml::statefulForm
     */
    public function getPageState($name,$defaultValue=null)
    {
    	if($this->_pageStates===null)
    		$this->_pageStates=$this->loadPageStates();
    	return isset($this->_pageStates[$name])?$this->_pageStates[$name]:$defaultValue;
    }
    
    /**
     * Saves a persistent page state value.
     * A page state is a variable that is persistent across POST requests of the same page.
     * In order to use persistent page states, the form(s) must be stateful
     * which are generated using {@link CHtml::statefulForm}.
     * @param string $name the state name
     * @param mixed $value the page state value
     * @param mixed $defaultValue the default page state value. If this is the same as
     * the given value, the state will be removed from persistent storage.
     * @see getPageState
     * @see CHtml::statefulForm
     */
    public function setPageState($name,$value,$defaultValue=null)
    {
    	if($this->_pageStates===null)
    		$this->_pageStates=$this->loadPageStates();
    	if($value===$defaultValue)
    		unset($this->_pageStates[$name]);
    	else
    		$this->_pageStates[$name]=$value;
    
    	$params=func_get_args();
    	$this->recordCachingAction('','setPageState',$params);
    }
    
    /**
     * Removes all page states.
     */
    public function clearPageStates()
    {
    	$this->_pageStates=array();
    }
    
    /**
     * Loads page states from a hidden input.
     * @return array the loaded page states
     */
    protected function loadPageStates()
    {
    	if(!empty($_POST[self::STATE_INPUT_NAME]))
    	{
    		if(($data=base64_decode($_POST[self::STATE_INPUT_NAME]))!==false)
    		{
    			if(extension_loaded('zlib'))
    				$data=@gzuncompress($data);
    			if(($data=Benben::app()->getSecurityManager()->validateData($data))!==false)
    				return unserialize($data);
    		}
    	}
    	return array();
    }
    
    /**
     * Saves page states as a base64 string.
     * @param array $states the states to be saved.
     * @param string $output the output to be modified. Note, this is passed by reference.
     */
    protected function savePageStates($states,&$output)
    {
    	$data=Benben::app()->getSecurityManager()->hashData(serialize($states));
    	if(extension_loaded('zlib'))
    		$data=gzcompress($data);
    	$value=base64_encode($data);
    	$output=str_replace(Html::pageStateField(''), Html::pageStateField($value),$output);
    }
}